{"version":3,"file":"field/dist/scripts/field.js","mappings":"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","sources":["webpack://craft-tinymce/./src/assets/field/src/scripts/TinyMCEField.ts","webpack://craft-tinymce/external var \"jQuery\"","webpack://craft-tinymce/webpack/bootstrap","webpack://craft-tinymce/./src/assets/field/src/scripts/main.ts"],"sourcesContent":["import * as $ from 'jquery'\nimport { Editor, EditorEvent, RawEditorOptions, TinyMCE } from 'tinymce'\n\ndeclare const tinymce: TinyMCE\n\ninterface Option {\n  elementType: string\n  optionTitle: string\n  sources: string[]\n}\n\ninterface FieldSettings {\n  allSites: Array<{\n    value: string\n    text: string\n  }>\n  defaultTransform: string\n  direction: string\n  editorConfig: RawEditorOptions\n  elementId: string\n  elementSiteId: string\n  entryTypes: Record<string, string>\n  fieldId: string\n  icons: Record<string, string>\n  id: string\n  language: string\n  linkOptions: Option[]\n  locale: string\n  transforms: Array<{\n    value: string\n    text: string\n  }>\n  translations: Record<string, string>\n  volumes: string[]\n}\n\ninterface Element {\n  id: string\n  label: string\n  url: string\n}\n\ninterface LinkDialogData {\n  url: string\n  text: string\n  newTab: boolean\n  site: string\n}\n\ninterface AssetDialogData {\n  title: string\n  caption: string\n  link: string\n  newTab: boolean\n  transform: string\n}\n\ntype ShowModalFactoryType = (elementType: string, settings: object) => Function\ntype DialogConfigFunction = (title: string, items: object[], initialData: object, onChange: Function, onSubmit: Function) => any\n\nconst showModalFactory: ShowModalFactoryType = (elementType, settings = {}) => {\n  let modal: GarnishModal|undefined\n\n  return () => {\n    if (typeof modal === 'undefined') {\n      modal = Craft.createElementSelectorModal(elementType, Object.assign({\n        resizable: true,\n        multiSelect: false,\n        disableOnSelect: true\n      }, settings))\n    } else {\n      modal.show()\n    }\n  }\n}\n\nconst dialogConfig: DialogConfigFunction = (title, items, initialData, onChange, onSubmit) => {\n  return {\n    title,\n    body: {\n      type: 'panel',\n      items\n    },\n    buttons: [\n      {\n        type: 'cancel',\n        name: 'cancel',\n        text: Craft.t('tinymce', 'Cancel')\n      },\n      {\n        type: 'submit',\n        name: 'submit',\n        text: Craft.t('tinymce', 'Save'),\n        buttonType: 'primary'\n      }\n    ],\n    initialData,\n    onChange,\n    onSubmit\n  }\n}\n\nconst backdropObserver = new window.MutationObserver(() => {\n  $('.tox-dialog-wrap__backdrop')\n    .off('click.field')\n    .on('click.field', () => tinymce.activeEditor?.windowManager.close())\n})\nbackdropObserver.observe(document.body, {\n  childList: true,\n  subtree: true\n})\n\nclass TinyMCEField {\n  public editor: Editor\n\n  private _cardHtml: Record<string|number, string> = {}\n\n  constructor (private readonly _settings: FieldSettings) {\n    const settings = this._settings\n    const options = Object.assign(\n      {\n        skin: 'craft',\n        plugins: 'autoresize lists link image code',\n        content_css: false,\n\n        // Toolbars\n        menubar: false,\n        statusbar: false,\n        toolbar: 'undo redo | styles | bold italic strikethrough | bullist numlist | insertLink insertImage | hr | code',\n\n        // Context menu (the default setting, except replacing the inbuilt link/image options with our own)\n        contextmenu: 'craftLink linkchecker craftImage table spellchecker configurepermanentpen',\n\n        // Formatting\n        allow_conditional_comments: false,\n        element_format: 'xhtml',\n        entity_encoding: 'raw',\n        fix_list_elements: true,\n        // Copying in the entire default `style_formats` here to add mark option to inline submenu,\n        // because using `style_formats_merge` to merge options into submenus doesn't work\n        // Source for defaults: https://www.tiny.cloud/docs/tinymce/6/user-formatting-options/#style_formats\n        style_formats: [\n          {\n            title: 'Headings',\n            items: [\n              { title: 'Heading 1', format: 'h1' },\n              { title: 'Heading 2', format: 'h2' },\n              { title: 'Heading 3', format: 'h3' },\n              { title: 'Heading 4', format: 'h4' },\n              { title: 'Heading 5', format: 'h5' },\n              { title: 'Heading 6', format: 'h6' }\n            ]\n          },\n          {\n            title: 'Inline',\n            items: [\n              { title: 'Bold', format: 'bold' },\n              { title: 'Italic', format: 'italic' },\n              { title: 'Underline', format: 'underline' },\n              { title: 'Strikethrough', format: 'strikethrough' },\n              { title: 'Superscript', format: 'superscript' },\n              { title: 'Subscript', format: 'subscript' },\n              { title: 'Code', format: 'code' },\n              { title: 'Mark', inline: 'mark' }\n            ]\n          },\n          {\n            title: 'Blocks',\n            items: [\n              { title: 'Paragraph', format: 'p' },\n              { title: 'Blockquote', format: 'blockquote' },\n              { title: 'Div', format: 'div' },\n              { title: 'Pre', format: 'pre' }\n            ]\n          },\n          {\n            title: 'Align',\n            items: [\n              { title: 'Left', format: 'alignleft' },\n              { title: 'Center', format: 'aligncenter' },\n              { title: 'Right', format: 'alignright' },\n              { title: 'Justify', format: 'alignjustify' }\n            ]\n          }\n        ],\n\n        // Links\n        relative_urls: false,\n        remove_script_host: false,\n        anchor_top: false,\n        anchor_bottom: false,\n\n        // Auto-resize\n        autoresize_bottom_margin: 0\n      },\n      this._settings.editorConfig,\n      {\n        selector: `#${this._settings.id}`,\n        language: this._settings.language,\n        directionality: this._settings.direction,\n        add_unload_trigger: false,\n\n        extended_valid_elements: [\n          'craft-entry',\n          this._settings.editorConfig.extended_valid_elements ?? null\n        ].filter((str) => str !== null).join(','),\n        custom_elements: [\n          'craft-entry',\n          this._settings.editorConfig.custom_elements ?? null\n        ].filter((str) => str !== null).join(','),\n\n        setup: (editor: Editor) => {\n          this.editor = editor\n          this._setup()\n        },\n\n        init_instance_callback: (editor: Editor) => {\n          this.editor = editor\n          this._init(options)\n\n          const configInit = settings.editorConfig.init_instance_callback\n          if (typeof configInit === 'function') {\n            configInit.apply(this, arguments)\n          }\n        }\n      }\n    )\n\n    tinymce.init(options).then(() => {}, () => {})\n  }\n\n  private _commandHandleFromElementType (elementType: string): string {\n    return elementType.split('\\\\').pop()?.toLowerCase() as string\n  }\n\n  private _setup (): void {\n    const linkOptions: object[] = []\n    const elementTypeHandles: string[] = []\n    const transformOptions = [{\n      value: '',\n      text: Craft.t('tinymce', 'No transform')\n    }]\n    transformOptions.push(...this._settings.transforms)\n\n    // Replace entry cards with placeholders in textareas\n    this.editor.on('GetContent', (ev) => {\n      const content = new DOMParser().parseFromString(ev.content, 'text/html').body\n      content.querySelectorAll('.craft-entry-card').forEach((container: HTMLDivElement) => {\n        const card = container.querySelector<HTMLDivElement>('.element.card')\n        const newElement = document.createElement('craft-entry')\n        newElement.setAttribute('data-entry-id', card?.dataset.id ?? '')\n        newElement.textContent = ' '\n        container.replaceWith(newElement)\n      })\n      ev.content = content.innerHTML\n    })\n\n    // Replace placeholders with entry cards in iframe\n    this.editor.on('BeforeSetContent', (ev) => {\n      const content = new DOMParser().parseFromString(ev.content, 'text/html').body\n      content.querySelectorAll('craft-entry').forEach((placeholder: HTMLTextAreaElement) => {\n        if (placeholder.hasAttribute('data-card-html')) {\n          // TODO\n        } else {\n          const newElement = document.createElement('div')\n          newElement.classList.add('craft-entry-card')\n          newElement.innerHTML = this._cardHtml[placeholder.dataset.entryId as string]\n          placeholder.replaceWith(newElement)\n        }\n      })\n      ev.content = content.innerHTML\n    })\n\n    // Load any custom icons\n    for (const [iconName, iconSvg] of Object.entries(this._settings.icons)) {\n      this.editor.ui.registry.addIcon(iconName, iconSvg)\n    }\n\n    for (const { elementType, optionTitle, sources } of this._settings.linkOptions) {\n      const elementTypeHandle = this._commandHandleFromElementType(elementType)\n      const menuItemTitle = `${elementTypeHandle}Link`\n\n      const showModal = showModalFactory(elementType, {\n        sources,\n        criteria: { locale: this._settings.locale },\n        onSelect: ([element]: [Element]) => {\n          const selectedContent = this.editor.selection.getContent()\n          this.editor.windowManager.open(this._linkDialogConfig(optionTitle, false, {\n            url: `${element.url}#${elementTypeHandle}:${element.id}@${this._settings.elementSiteId}:url`,\n            // Doing `String(element.label)` in case the element title was a number\n            text: selectedContent.length > 0 ? selectedContent : String(element.label),\n            site: this._settings.elementSiteId\n          }))\n        }\n      })\n\n      linkOptions.push({\n        type: 'menuitem',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n      this.editor.ui.registry.addMenuItem(menuItemTitle, {\n        icon: 'link',\n        text: optionTitle,\n        onAction: () => showModal()\n      })\n      elementTypeHandles.push(menuItemTitle)\n    }\n\n    linkOptions.push({\n      type: 'menuitem',\n      text: Craft.t('tinymce', 'Insert/edit link'),\n      onAction: () => this.editor.execCommand('mceLink')\n    })\n\n    // Insert link menu button, for use on the toolbar\n    this.editor.ui.registry.addMenuButton('insertLink', {\n      icon: 'link',\n      tooltip: Craft.t('tinymce', 'Link'),\n      fetch: (callback) => callback(linkOptions)\n    })\n\n    // Edit link menu item, for use on the context menu\n    const editLinkTitle = Craft.t('tinymce', 'Edit link')\n    this.editor.ui.registry.addMenuItem('editLink', {\n      icon: 'link',\n      text: editLinkTitle,\n      onAction: (_) => {\n        const element = this.editor.dom.getParent(this.editor.selection.getStart(), 'a[href]') as globalThis.Element\n        const url = element?.getAttribute('href') ?? ''\n        const siteMatch = url.match(/@([0-9]+)(:url)$/)\n        this.editor.selection.select(element)\n        this.editor.windowManager.open(this._linkDialogConfig(editLinkTitle, true, {\n          url,\n          text: element?.textContent ?? '',\n          newTab: (element?.getAttribute('target') ?? '') === '_blank',\n          site: siteMatch !== null ? siteMatch[1] : this._settings.elementSiteId\n        }))\n      }\n    })\n\n    this.editor.ui.registry.addContextMenu('craftLink', {\n      update: (element) => {\n        const parents = this.editor.dom.getParents(element, 'a')\n\n        // If we're not on a link, show the element link options\n        if (parents.length === 0) {\n          return `${elementTypeHandles.join(' ')} link`\n        }\n\n        // If we're on a Craft link, show the Craft edit link option\n        // Otherwise, show the normal TinyMCE link option\n        const onCraftLink = parents.some((parent: HTMLAnchorElement) => parent.href.endsWith(':url'))\n\n        return `${onCraftLink ? 'editLink' : 'link openlink'} unlink`\n      }\n    })\n\n    // Image button, for use on the toolbar\n    const imageButtonTitle = Craft.t('tinymce', 'Insert an image')\n    this.editor.ui.registry.addButton('insertImage', {\n      icon: 'image',\n      tooltip: imageButtonTitle,\n      onAction: () => showModalFactory('craft\\\\elements\\\\Asset', {\n        sources: this._settings.volumes,\n        transforms: this._settings.transforms.map((transform) => {\n          return {\n            handle: transform.value,\n            name: transform.text\n          }\n        }),\n        storageKey: 'RichTextFieldType.ChooseImage',\n        criteria: {\n          locale: this._settings.locale,\n          kind: 'image'\n        },\n        onSelect: ([element]: [Element], transform: string|null = null) => {\n          this.editor.windowManager.open(this._imageDialogConfig(imageButtonTitle, true, transformOptions, element, {\n            transform: transform ?? this._settings.defaultTransform\n          }))\n        }\n      })()\n    })\n\n    // Image menu item, for use on the context menu\n    const editImageTitle = Craft.t('tinymce', 'Edit image')\n    this.editor.ui.registry.addMenuItem('editImage', {\n      icon: 'image',\n      text: editImageTitle,\n      onAction: (_) => {\n        const selectionStart = this.editor.selection.getStart()\n        const img = this.editor.dom.getParent(selectionStart, 'img') as globalThis.Element\n        const a = this.editor.dom.getParent(img, 'a')\n        const figure = this.editor.dom.getParent(a ?? img, 'figure') as globalThis.Element\n        const figcaption = (a ?? img).nextSibling\n        const imgSrc = img?.getAttribute('src')\n\n        const transformMatch = imgSrc?.match(/:transform:(.+)$/) ?? []\n        const transform = transformMatch.length > 0 ? transformMatch.pop() as string : ''\n\n        const elementIdMatch = imgSrc?.match(/#asset:([0-9]+)/) as string[]\n        const elementId = elementIdMatch.pop() as string\n        const elementUrl = (transform !== '' ? imgSrc?.replace(`/_${transform}/`, '/') : imgSrc)\n          ?.replace(`:transform:${transform}`, '')\n          ?.replace(/:url$/, '')\n          ?.replace(`#asset:${elementId}`, '') as string\n\n        this.editor.selection.select(figure)\n        this.editor.windowManager.open(this._imageDialogConfig(editImageTitle, true, transformOptions, {\n          id: elementId,\n          url: elementUrl,\n          label: '' // We don't care about the element label at this point\n        }, {\n          title: img?.getAttribute('alt') ?? '',\n          caption: figcaption?.textContent ?? '',\n          link: a?.href ?? '',\n          newTab: a?.target === '_blank' ?? false,\n          transform\n        }))\n      }\n    })\n\n    this.editor.ui.registry.addContextMenu('craftImage', {\n      update: (element) => {\n        const ancestors = this.editor.dom.getParents(element, 'figure, img')\n\n        // If we're not on an image, don't show an option\n        if (ancestors.length === 0) {\n          return ''\n        }\n\n        // If we're not on a Craft asset, show the normal TinyMCE image option\n        const figure = ancestors.some((ancestor) => ancestor.tagName === 'FIGURE')\n\n        return figure ? 'editImage' : 'image'\n      }\n    })\n\n    // Create entry button, for use on the toolbar\n    this.editor.ui.registry.addMenuButton('craftentry', {\n      icon: 'craftentry',\n      tooltip: Craft.t('tinymce', 'Create an entry'),\n      fetch: (callback) => callback(Object.keys(this._settings.entryTypes).map((id) => {\n        return {\n          type: 'menuitem',\n          text: this._settings.entryTypes[id],\n          onAction: async () => {\n            try {\n              await this._createEntry(id)\n            } catch (err) {\n              Craft.cp.displayError(err.message)\n            }\n          }\n        }\n      }))\n    })\n\n    tinymce.addI18n(this._settings.language, this._settings.translations)\n  }\n\n  private _init (options: Object): void {\n    this._initFocus()\n    const $form = $(this.editor.formElement as HTMLElement)\n\n    // Update the form value on any content change, and trigger a change event so drafts can autosave\n    this.editor.on('Dirty', () => {\n      this.editor.save()\n      $form.trigger('change')\n    })\n\n    // Allow use of Craft element save shortcuts\n    this.editor.addShortcut(\n      'meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: false,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n    this.editor.addShortcut(\n      'shift+meta+s',\n      '',\n      () => Garnish.uiLayerManager.triggerShortcut(new KeyboardEvent('keydown', {\n        shiftKey: true,\n        metaKey: true,\n        ctrlKey: true,\n        altKey: false,\n        keyCode: Garnish.S_KEY\n      }))\n    )\n\n    // Remove the editor while switching to/from preview mode, otherwise it becomes unusable until page reload\n    const removeEditor: () => void = () => tinymce.execCommand('mceRemoveEditor', false, this._settings.id)\n    const addEditor: () => void = () => {\n      tinymce.execCommand('mceAddEditor', false, {\n        id: this._settings.id,\n        options\n      })\n      this._initFocus()\n    }\n\n    if (typeof Craft.Preview !== 'undefined') {\n      Garnish.on(Craft.Preview, 'beforeOpen beforeClose', removeEditor)\n      Garnish.on(Craft.Preview, 'open close', addEditor)\n    }\n\n    if (typeof Craft.LivePreview !== 'undefined') {\n      Garnish.on(Craft.LivePreview, 'beforeEnter beforeExit', removeEditor)\n      Garnish.on(Craft.LivePreview, 'enter exit', addEditor)\n    }\n\n    // Remove the editor while dragging Matrix, Neo, Super Table blocks - same reason as above\n    if (typeof Garnish.Drag !== 'undefined') {\n      let draggee: HTMLElement|null = null\n      Garnish.on(Garnish.Drag, 'dragStart', (event: GarnishDragEvent) => {\n        draggee = event.target?.$draggee[0]\n        if (draggee.contains(this.editor.editorContainer)) {\n          // Ensure the block height is maintained when dragged, so the empty space left by the block is consistent\n          draggee.style.height = `${draggee.offsetHeight}px`\n\n          // Ensure the cloned iframe has the same content as the original\n          // A small timeout required because the clone's content document seems to get overwritten\n          const editorIframe = this.editor.editorContainer.querySelector('iframe') as HTMLIFrameElement\n          const editorIframeHtmlEl = editorIframe.contentDocument?.querySelector('html') as HTMLElement\n          const editorIframeInnerHtml = editorIframeHtmlEl.innerHTML\n          setTimeout(\n            () => {\n              const blockClone = document.querySelector('.draghelper') as HTMLElement\n              const cloneIframe = blockClone.querySelector(`#${editorIframe.id}`) as HTMLIFrameElement\n              const cloneIframeHtmlEl = cloneIframe.contentDocument?.querySelector('html') as HTMLElement\n              cloneIframeHtmlEl.innerHTML = editorIframeInnerHtml\n            },\n            60\n          )\n\n          removeEditor()\n        } else {\n          draggee = null\n        }\n      })\n      Garnish.on(Garnish.Drag, 'dragStop', (_: GarnishDragEvent) => {\n        if (draggee !== null) {\n          // A small timeout to let the editor fully reinitialise before reverting the draggee height change\n          setTimeout(\n            () => {\n              (draggee as HTMLElement).style.height = 'auto'\n              draggee = null\n            },\n            100\n          )\n\n          addEditor()\n        }\n      })\n    }\n  }\n\n  private _initFocus (): void {\n    this.editor.on('focus', (_: EditorEvent<any>) => this.editor.container.classList.add('mce-focused'))\n    this.editor.on('blur', (_: EditorEvent<any>) => this.editor.container.classList.remove('mce-focused'))\n  }\n\n  private _linkDialogConfig (title: string, enforceReplace: boolean, initialData: object): any {\n    const selectedContent = this.editor.selection.getContent()\n    return dialogConfig(\n      title,\n      [\n        {\n          type: 'input',\n          name: 'url',\n          label: Craft.t('tinymce', 'URL'),\n          enabled: false\n        },\n        {\n          type: 'input',\n          name: 'text',\n          label: Craft.t('tinymce', 'Text')\n        },\n        {\n          type: 'checkbox',\n          name: 'newTab',\n          label: Craft.t('tinymce', 'Open in new tab?')\n        },\n        {\n          type: 'selectbox',\n          name: 'site',\n          label: Craft.t('tinymce', 'Site'),\n          items: this._settings.allSites\n        }\n      ],\n      initialData,\n      (api: any) => {\n        const data = api.getData() as LinkDialogData\n        api.setData({\n          url: data.url.replace(/@([0-9]+)(:url)$/, `@${data.site}:url`)\n        })\n      },\n      (api: any) => {\n        const data = api.getData() as LinkDialogData\n        const command = enforceReplace || selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n        const newContent = `<a href=\"${data.url}\" title=\"${data.text}\"${data.newTab ? ' target=\"_blank\"' : ''}>${data.text}</a>`\n\n        this.editor.execCommand(command, false, newContent)\n        api.close()\n      }\n    )\n  }\n\n  private _imageDialogConfig (\n    title: string,\n    enforceReplace: boolean,\n    transforms: object,\n    element: Element,\n    initialData: object\n  ): any {\n    const selectedContent = this.editor.selection.getContent()\n    return dialogConfig(\n      title,\n      [\n        {\n          type: 'input',\n          name: 'title',\n          label: Craft.t('tinymce', 'Title')\n        },\n        {\n          type: 'input',\n          name: 'caption',\n          label: Craft.t('tinymce', 'Caption')\n        },\n        {\n          type: 'input',\n          name: 'link',\n          label: Craft.t('tinymce', 'Link')\n        },\n        {\n          type: 'checkbox',\n          name: 'newTab',\n          label: Craft.t('tinymce', 'Open in new tab?')\n        },\n        {\n          type: 'selectbox',\n          name: 'transform',\n          label: Craft.t('tinymce', 'Transform'),\n          items: transforms\n        }\n      ],\n      initialData,\n      () => {},\n      (api: any) => {\n        const apiData = api.getData() as AssetDialogData\n        const command = enforceReplace || selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n        const hasTitle = apiData.title.length > 0\n        const hasCaption = apiData.caption.length > 0\n        const hasLink = apiData.link.length > 0\n        const hasTransform = apiData.transform !== ''\n        const finishIt: (url: string) => void = (url) => {\n          const content = [\n            '<figure>',\n            hasLink ? `<a href=\"${apiData.link}\"${apiData.newTab ? ' target=\"_blank\"' : ''}>` : '',\n            `<img src=\"${url}\"${hasTitle ? `alt=\"${apiData.title}\"` : ''}>`,\n            hasLink ? '</a>' : '',\n            hasCaption ? `<figcaption>${apiData.caption}</figcaption>` : ''\n          ].join('')\n\n          this.editor.execCommand(command, false, content)\n          api.close()\n        }\n\n        if (hasTransform) {\n          const data = {\n            assetId: element.id,\n            handle: apiData.transform\n          }\n          Craft.sendActionRequest('POST', 'assets/generate-transform', { data })\n            .then((response: CraftResponse) => {\n              const url = (response.data.url as string) + `#asset:${element.id}:transform:${apiData.transform}`\n              finishIt(url)\n            })\n            .catch((_: any) => {\n              Craft.cp.displayError(Craft.t('tinymce', 'There was an error generating the transform URL.'))\n            })\n        } else {\n          finishIt(`${element.url}#asset:${element.id}:url`)\n        }\n      }\n    )\n  }\n\n  private async _createEntry (typeId: string): Promise<any> {\n    const elementType = 'craft\\\\elements\\\\Entry'\n    const createData = {\n      elementType,\n      fieldId: this._settings.fieldId,\n      ownerId: this._settings.elementId,\n      siteId: this._settings.elementSiteId,\n      typeId\n    }\n    const createResponse = await Craft.sendActionRequest(\n      'POST',\n      'elements/create',\n      {\n        data: createData\n      }\n    )\n    Craft\n      .createElementEditor(elementType, {\n        draftId: createResponse.data.element.draftId,\n        elementId: createResponse.data.element.id,\n        siteId: createResponse.data.element.siteId,\n        params: {\n          fresh: 1\n        }\n      })\n      .on('submit', async () => {\n        const cardHtml = await this._loadCardHtml(\n          createResponse.data.element.id,\n          createResponse.data.element.siteId\n        )\n        const selectedContent = this.editor.selection.getContent()\n        const command = selectedContent.length > 0 ? 'mceReplaceContent' : 'mceInsertContent'\n\n        this.editor.execCommand(command, false, `<div class=\"craft-entry-card\">${cardHtml}</div>`)\n      })\n  }\n\n  private async _loadCardHtml (entryId: string|number, siteId: string|number): Promise<string> {\n    if (typeof this._cardHtml[entryId] === 'undefined') {\n      const data = {\n        entryId,\n        siteId\n      }\n      const response = await Craft.sendActionRequest('POST', 'tinymce/input/entry-card-html', { data })\n      this._cardHtml[entryId] = response.data.cardHtml\n    }\n\n    return this._cardHtml[entryId]\n  }\n}\n\nexport { FieldSettings, TinyMCEField }\n","module.exports = jQuery;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { FieldSettings, TinyMCEField } from './TinyMCEField'\n\ndeclare global {\n  interface Window {\n    TinyMCE: {\n      init: (settings: FieldSettings) => void\n      fields: () => TinyMCEField[]\n    }\n  }\n}\n\nconst fields: TinyMCEField[] = []\n\nwindow.TinyMCE = {\n  init: (settings) => {\n    fields.push(new TinyMCEField(settings))\n  },\n\n  fields: () => Array.from(fields)\n}\n"],"names":["showModalFactory","elementType","settings","modal","Craft","createElementSelectorModal","Object","assign","resizable","multiSelect","disableOnSelect","show","dialogConfig","title","items","initialData","onChange","onSubmit","body","type","buttons","name","text","t","buttonType","window","MutationObserver","$","off","on","tinymce","activeEditor","windowManager","close","observe","document","childList","subtree","TinyMCEField","constructor","_settings","_cardHtml","this","options","skin","plugins","content_css","menubar","statusbar","toolbar","contextmenu","allow_conditional_comments","element_format","entity_encoding","fix_list_elements","style_formats","format","inline","relative_urls","remove_script_host","anchor_top","anchor_bottom","autoresize_bottom_margin","editorConfig","selector","id","language","directionality","direction","add_unload_trigger","extended_valid_elements","filter","str","join","custom_elements","setup","editor","_setup","init_instance_callback","_init","configInit","apply","arguments","init","then","_commandHandleFromElementType","split","pop","toLowerCase","linkOptions","elementTypeHandles","transformOptions","value","push","transforms","ev","content","DOMParser","parseFromString","querySelectorAll","forEach","container","card","querySelector","newElement","createElement","setAttribute","dataset","textContent","replaceWith","innerHTML","placeholder","hasAttribute","classList","add","entryId","iconName","iconSvg","entries","icons","ui","registry","addIcon","optionTitle","sources","elementTypeHandle","menuItemTitle","showModal","criteria","locale","onSelect","element","selectedContent","selection","getContent","open","_linkDialogConfig","url","elementSiteId","length","String","label","site","onAction","addMenuItem","icon","execCommand","addMenuButton","tooltip","fetch","callback","editLinkTitle","_","dom","getParent","getStart","getAttribute","siteMatch","match","select","newTab","addContextMenu","update","parents","getParents","some","parent","href","endsWith","imageButtonTitle","addButton","volumes","map","transform","handle","storageKey","kind","_imageDialogConfig","defaultTransform","editImageTitle","selectionStart","img","a","figure","figcaption","nextSibling","imgSrc","transformMatch","elementId","elementUrl","replace","caption","link","target","ancestors","ancestor","tagName","keys","entryTypes","_createEntry","err","cp","displayError","message","addI18n","translations","_initFocus","$form","formElement","save","trigger","addShortcut","Garnish","uiLayerManager","triggerShortcut","KeyboardEvent","shiftKey","metaKey","ctrlKey","altKey","keyCode","S_KEY","removeEditor","addEditor","Preview","LivePreview","Drag","draggee","event","$draggee","contains","editorContainer","style","height","offsetHeight","editorIframe","editorIframeInnerHtml","contentDocument","setTimeout","remove","enforceReplace","enabled","allSites","api","data","getData","setData","command","newContent","apiData","hasTitle","hasCaption","hasLink","hasTransform","finishIt","assetId","sendActionRequest","response","catch","typeId","createData","fieldId","ownerId","siteId","createResponse","createElementEditor","draftId","params","fresh","cardHtml","_loadCardHtml","module","exports","jQuery","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","fields","TinyMCE","Array","from"],"sourceRoot":""}